/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    /** used for healthcheck */
    get: {
      responses: {
        /** @description success */
        200: {
          content: {
            'application/json': components['schemas']['health_response']
          }
        }
        /** @description error */
        default: {
          content: {
            'application/json': components['schemas']['ansa_error']
          }
        }
      }
    }
  }
  '/customers': {
    /** list all customers */
    get: operations['listCustomers']
    /** create a customer balance at a merchant */
    post: operations['createCustomer']
  }
  '/customers/count': {
    /** count all customers at a merchant */
    get: operations['countCustomers']
  }
  '/customers/search': {
    /** Retrieve an existing Customer object by email, id, or phone number */
    get: operations['searchCustomer']
  }
  '/customers/clone': {
    /** create a customer balance at a merchant by cloning the customer from an existing source */
    post: operations['createCustomerClone']
  }
  '/customers/{customerId}': {
    /** Retrieve an existing Customer object by its identifier. */
    get: operations['getCustomer']
    /** Update an existing customer */
    put: operations['updateCustomer']
  }
  '/customers/{customerId}/deactivate': {
    /** Deactivate an existing Customer object by its identifier. */
    post: operations['deactivateCustomer']
  }
  '/customers/{customerId}/payment-methods': {
    /** List all payment methods */
    get: operations['listPaymentMethods']
    /** Creates a PaymentMethod object. */
    post: operations['createPaymentMethod']
  }
  '/customers/{customerId}/payment-methods/{paymentMethodId}': {
    /** Updates a PaymentMethod object. */
    put: operations['updatePaymentMethod']
    /** Delete a payment method. */
    delete: operations['deletePaymentMethod']
  }
  '/customers/{customerId}/payment-methods/clone': {
    /** create a payment method by cloning it from an existing source */
    post: operations['createPaymentMethodClone']
  }
  '/customers/{customerId}/auto-reload': {
    /** Retrieve the auto reload configuration for a customer. */
    get: operations['getAutoReloadConfig']
    /** Update the auto reload configuration for a customer. */
    post: operations['setAutoReloadConfig']
  }
  '/customers/{customerId}/add-balance': {
    /** add funds to a customer balance */
    post: operations['addBalance']
  }
  '/customers/{customerId}/use-balance': {
    /** use the customer balance funds to complete a purchase */
    post: operations['useBalance']
  }
  '/customers/{customerId}/transactions': {
    /** retrieve all transactions involving this customer */
    get: operations['listCustomerTransactions']
  }
  '/customers/{customerId}/virtual-card': {
    /** get virtual card for a given customer */
    get: operations['getVirtualCard']
    /** update the virtual card for a given consumer */
    put: operations['updateVirtualCard']
    /** create a virtual card for a given customer */
    post: operations['createVirtualCard']
  }
  '/customers/{customerId}/virtual-card/transactions': {
    /** retrieve all transactions for this virtual card */
    get: operations['listVirtualCardTransactions']
  }
  '/customers/{customerId}/virtual-card/transactions/count': {
    /** count all virtual card transactions */
    get: operations['countVirtualCardTxns']
  }
  '/customers/{customerId}/virtual-cards/{virtualCardId}/provision': {
    /** provision a given virtual card */
    post: operations['provisionVirtualCard']
  }
  '/refunds/balance': {
    /** initiate a refund to a customer's balance */
    post: operations['merchantRefundBalance']
  }
  '/refunds/payment-method': {
    /** initiate a refund to a customer's payment method */
    post: operations['merchantRefundPaymentMethod']
  }
  '/refunds/{refundId}': {
    /** get details about refund */
    get: operations['merchantGetRefund']
  }
  '/fund-customer-balance': {
    /** merchant add funds to a customers balance */
    post: operations['merchantFundBalance']
  }
  '/initialize-payment-session': {
    /** initiate a PaymentSession object for client authorization */
    post: operations['initializePaymentSession']
  }
  '/merchants/{merchantId}': {
    /** get details about a merchant */
    get: operations['merchantGet']
    /** update details for a merchant */
    put: operations['updateMerchant']
  }
  '/merchants/{merchantId}/balance': {
    /** get the merchant's current balance */
    get: operations['getMerchantBalance']
  }
  '/merchants/{merchantId}/insights': {
    /** fetch merchant insights */
    get: operations['merchantInsights']
  }
  '/transactions': {
    /** retrieve all transactions with a given merchant */
    get: operations['listMerchantTransactions']
  }
  '/transactions/count': {
    /** count number of transactions */
    get: operations['countTransactions']
  }
  '/transactions/{transactionId}': {
    /** get a merchant transaction */
    get: operations['getMerchantTransaction']
  }
  '/transactions/{transactionId}/label': {
    /** update a specified transaction's label */
    put: operations['updateMerchantTransactionLabel']
  }
  '/transactions/{transactionId}/metadata': {
    /** update a specified transaction's metadata and label */
    put: operations['updateTransactionMetadata']
  }
  '/transactions/{transactionId}/refunds': {
    /** get refunds for a transaction */
    get: operations['getMerchantTransactionRefunds']
  }
  '/admin/merchants/{merchantId}/auth/refresh': {
    /** refresh Ansa merchant's auth credentials */
    post: operations['adminAuthRefresh']
  }
  '/admin/settle-merchant-balance': {
    /** trigger settlement for a merchant's pending payout balance */
    post: operations['settleMerchantBalance']
  }
  '/internal-admin/merchants': {
    /** list all Ansa merchants and their information */
    get: operations['internalAdminListMerchants']
    /** create an Ansa merchant account */
    post: operations['internalAdminCreateMerchant']
  }
  '/internal-admin/merchants/{merchantId}/auth/api-keys': {
    /** create an Ansa merchant api key */
    post: operations['internalAdminCreateMerchantApiKey']
  }
  '/internal-admin/merchants/{merchantId}/customers': {
    /** list all customers under an Ansa merchant */
    get: operations['internalAdminListCustomers']
  }
  '/internal-admin/merchants/{merchantId}/balance': {
    /** get the merchant balance */
    get: operations['internalAdminGetMerchantBalance']
  }
  '/internal-admin/merchants/{merchantId}/fund-customer-balance': {
    /** internal admin endpoint to add funds to a customers balance */
    post: operations['internalAdminMerchantFundBalance']
  }
  '/internal-admin/merchants/{merchantId}/total-customer-balance': {
    /** get total customer balance for a merchant */
    get: operations['internalAdminGetMerchantTotalCustomerBalance']
  }
  '/internal-admin/merchants/{merchantId}/customers/{customerId}': {
    /** get a customer under an Ansa merchant */
    get: operations['internalAdminGetCustomer']
  }
  '/internal-admin/merchants/{merchantId}/activate-virtual-card-program': {
    /** Activate virtual card program for a merchant */
    post: operations['internalAdminActivateVirtualCardProgram']
  }
  '/internal-admin/merchants/{merchantId}/acceptor-ids': {
    /** list all acceptor ids for a given merchant */
    get: operations['internalAdminListMerchantAcceptorIds']
    /** upsert a list of acceptor ids for a given merchant */
    put: operations['internalAdminUpsertMerchantAcceptorIds']
  }
  '/webhook/auth/square/call-back': {
    /** called by PSPs to register auth tokens to the new merchant */
    get: operations['webhookSquareAuthCallBack']
  }
  '/webhook/refunds/square': {
    /** called by Square to process refunds */
    post: operations['webhookHandleSquareRefund']
  }
  '/webhook/refunds/stripe': {
    /** called by Stripe to process refunds */
    post: operations['webhookHandleStripeRefund']
  }
  '/webhook/virtual-cards/authorization': {
    /** called by Lithic to process virtual card transaction authorizations */
    post: operations['webhookHandleVirtualCardsAuthorization']
  }
  '/webhook/test': {
    /** used for webhook testing (Svix) */
    post: operations['webhookTest']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /**
     * Charge
     * @description To charge a credit or a debit card, you create a `Charge` object. You can
     * retrieve and refund individual charges as well as list all charges. Charges
     * are identified by a unique, random ID.
     *
     * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
     */
    external__stripe__charge: {
      /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: number
      /** @description Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
      amount_refunded: number
      /** @description ID of the Connect application that created the charge. */
      application?: string
      /** @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      application_fee?: string
      /** @description The amount of the application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      application_fee_amount?: number
      /** @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
      balance_transaction?: string
      /** billing_details */
      billing_details: {
        /** Address */
        address?: {
          /** @description City, district, suburb, town, or village. */
          city?: string
          /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
          country?: string
          /** @description Address line 1 (e.g., street, PO Box, or company name). */
          line1?: string
          /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
          line2?: string
          /** @description ZIP or postal code. */
          postal_code?: string
          /** @description State, county, province, or region. */
          state?: string
        }
        /** @description Email address. */
        email?: string
        /** @description Full name. */
        name?: string
        /** @description Billing phone number (including extension). */
        phone?: string
      }
      /** @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
      calculated_statement_descriptor?: string
      /** @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
      captured: boolean
      /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string
      /** @description ID of the customer this charge is for if one exists. */
      customer?: string
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string
      /** @description Whether the charge has been disputed. */
      disputed: boolean
      /** @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      failure_code?: string
      /** @description Message to user further explaining reason for charge failure if available. */
      failure_message?: string
      /** ChargeFraudDetails */
      fraud_details?: {
        /** @description Assessments from Stripe. If set, the value is `fraudulent`. */
        stripe_report?: string
        /** @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
        user_report?: string
      }
      /** @description Unique identifier for the object. */
      id: string
      /** @description ID of the invoice this charge is for if one exists. */
      invoice?: string
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean
      /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: Record<string, never>
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: 'charge'
      /** @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
      on_behalf_of?: string
      /** @description ID of the order this charge is for if one exists. */
      order?: string
      /** ChargeOutcome */
      outcome?: {
        /** @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
        network_status?: string
        /** @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
        reason?: string
        /** @description Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. */
        risk_level?: string
        /** @description Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
        risk_score?: number
        /** @description The ID of the Radar rule that matched the payment, if applicable. */
        rule?: string
        /** @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
        seller_message?: string
        /** @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
        type: string
      }
      /** @description `true` if the charge succeeded, or was successfully authorized for later capture. */
      paid: boolean
      /** @description ID of the PaymentIntent associated with this charge, if one exists. */
      payment_intent?: string
      /** @description ID of the payment method used in this charge. */
      payment_method?: string
      /** payment_method_details */
      payment_method_details?: {
        /** payment_method_details_ach_credit_transfer */
        ach_credit_transfer?: {
          /** @description Account number to transfer funds to. */
          account_number?: string
          /** @description Name of the bank associated with the routing number. */
          bank_name?: string
          /** @description Routing transit number for the bank account to transfer funds to. */
          routing_number?: string
          /** @description SWIFT code of the bank associated with the routing number. */
          swift_code?: string
        }
        /** payment_method_details_ach_debit */
        ach_debit?: {
          /**
           * @description Type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          account_holder_type?: 'company' | 'individual'
          /** @description Name of the bank associated with the bank account. */
          bank_name?: string
          /** @description Two-letter ISO code representing the country the bank account is located in. */
          country?: string
          /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
          fingerprint?: string
          /** @description Last four digits of the bank account number. */
          last4?: string
          /** @description Routing transit number of the bank account. */
          routing_number?: string
        }
        /** payment_method_details_alipay */
        alipay?: Record<string, never>
        /** payment_method_details_au_becs_debit */
        au_becs_debit?: {
          /** @description Bank-State-Branch number of the bank account. */
          bsb_number?: string
          /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
          fingerprint?: string
          /** @description Last four digits of the bank account number. */
          last4?: string
          /** @description ID of the mandate used to make this payment. */
          mandate?: string
        }
        /** payment_method_details_bancontact */
        bancontact?: {
          /** @description Bank code of bank associated with the bank account. */
          bank_code?: string
          /** @description Name of the bank associated with the bank account. */
          bank_name?: string
          /** @description Bank Identifier Code of the bank associated with the bank account. */
          bic?: string
          /** @description Last four characters of the IBAN. */
          iban_last4?: string
          /**
           * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
           * Can be one of `en`, `de`, `fr`, or `nl`
           * @enum {string}
           */
          preferred_language?: 'de' | 'en' | 'fr' | 'nl'
          /**
           * @description Owner's verified full name. Values are verified or provided by Bancontact directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_card */
        card?: {
          /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
          brand?: string
          /** payment_method_details_card_checks */
          checks?: {
            /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_line1_check?: string
            /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            address_postal_code_check?: string
            /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
            cvc_check?: string
          }
          /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
          country?: string
          /** @description Two-digit number representing the card's expiration month. */
          exp_month?: number
          /** @description Four-digit number representing the card's expiration year. */
          exp_year?: number
          /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
          fingerprint?: string
          /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
          funding?: string
          /** payment_method_details_card_installments */
          installments?: {
            /** payment_method_details_card_installments_plan */
            plan?: {
              /** @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
              count?: number
              /**
               * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
               * One of `month`.
               * @enum {string}
               */
              interval?: 'month'
              /**
               * @description Type of installment plan, one of `fixed_count`.
               * @enum {string}
               */
              type: 'fixed_count'
            }
          }
          /** @description The last four digits of the card. */
          last4?: string
          /** @description Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
          network?: string
          /** three_d_secure_details */
          three_d_secure?: {
            /** @description Whether or not authentication was performed. 3D Secure will succeed without authentication when the card is not enrolled. */
            authenticated?: boolean
            /** @description Whether or not 3D Secure succeeded. */
            succeeded?: boolean
            /** @description The version of 3D Secure that was used for this payment. */
            version: string
          }
          /** payment_method_details_card_wallet */
          wallet?: {
            /** payment_method_details_card_wallet_amex_express_checkout */
            amex_express_checkout?: Record<string, never>
            /** payment_method_details_card_wallet_apple_pay */
            apple_pay?: Record<string, never>
            /** @description (For tokenized numbers only.) The last four digits of the device account number. */
            dynamic_last4?: string
            /** payment_method_details_card_wallet_google_pay */
            google_pay?: Record<string, never>
            /** payment_method_details_card_wallet_masterpass */
            masterpass?: {
              /** Address */
              billing_address?: {
                /** @description City, district, suburb, town, or village. */
                city?: string
                /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                country?: string
                /** @description Address line 1 (e.g., street, PO Box, or company name). */
                line1?: string
                /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
                line2?: string
                /** @description ZIP or postal code. */
                postal_code?: string
                /** @description State, county, province, or region. */
                state?: string
              }
              /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
              email?: string
              /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
              name?: string
              /** Address */
              shipping_address?: {
                /** @description City, district, suburb, town, or village. */
                city?: string
                /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                country?: string
                /** @description Address line 1 (e.g., street, PO Box, or company name). */
                line1?: string
                /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
                line2?: string
                /** @description ZIP or postal code. */
                postal_code?: string
                /** @description State, county, province, or region. */
                state?: string
              }
            }
            /** payment_method_details_card_wallet_samsung_pay */
            samsung_pay?: Record<string, never>
            /**
             * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
             * @enum {string}
             */
            type:
              | 'amex_express_checkout'
              | 'apple_pay'
              | 'google_pay'
              | 'masterpass'
              | 'samsung_pay'
              | 'visa_checkout'
            /** payment_method_details_card_wallet_visa_checkout */
            visa_checkout?: {
              /** Address */
              billing_address?: {
                /** @description City, district, suburb, town, or village. */
                city?: string
                /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                country?: string
                /** @description Address line 1 (e.g., street, PO Box, or company name). */
                line1?: string
                /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
                line2?: string
                /** @description ZIP or postal code. */
                postal_code?: string
                /** @description State, county, province, or region. */
                state?: string
              }
              /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
              email?: string
              /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
              name?: string
              /** Address */
              shipping_address?: {
                /** @description City, district, suburb, town, or village. */
                city?: string
                /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
                country?: string
                /** @description Address line 1 (e.g., street, PO Box, or company name). */
                line1?: string
                /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
                line2?: string
                /** @description ZIP or postal code. */
                postal_code?: string
                /** @description State, county, province, or region. */
                state?: string
              }
            }
          }
        }
        /** payment_method_details_card_present */
        card_present?: {
          /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
          brand?: string
          /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). */
          cardholder_name?: string
          /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
          country?: string
          /** @description Authorization response cryptogram. */
          emv_auth_data?: string
          /** @description Two-digit number representing the card's expiration month. */
          exp_month?: number
          /** @description Four-digit number representing the card's expiration year. */
          exp_year?: number
          /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
          fingerprint?: string
          /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
          funding?: string
          /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
          generated_card?: string
          /** @description The last four digits of the card. */
          last4?: string
          /** @description Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
          network?: string
          /** @description How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode */
          read_method?: string
          /** payment_method_details_card_present_receipt */
          receipt?: {
            /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
            application_cryptogram?: string
            /** @description Mnenomic of the Application Identifier. */
            application_preferred_name?: string
            /** @description Identifier for this transaction. */
            authorization_code?: string
            /** @description EMV tag 8A. A code returned by the card issuer. */
            authorization_response_code?: string
            /** @description How the cardholder verified ownership of the card. */
            cardholder_verification_method?: string
            /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
            dedicated_file_name?: string
            /** @description The outcome of a series of EMV functions performed by the card reader. */
            terminal_verification_results?: string
            /** @description An indication of various EMV functions performed during the transaction. */
            transaction_status_information?: string
          }
        }
        /** payment_method_details_eps */
        eps?: {
          /**
           * @description Owner's verified full name. Values are verified or provided by EPS directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_fpx */
        fpx?: {
          /**
           * @description The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
           * @enum {string}
           */
          bank:
            | 'affin_bank'
            | 'alliance_bank'
            | 'ambank'
            | 'bank_islam'
            | 'bank_muamalat'
            | 'bank_rakyat'
            | 'bsn'
            | 'cimb'
            | 'deutsche_bank'
            | 'hong_leong_bank'
            | 'hsbc'
            | 'kfh'
            | 'maybank2e'
            | 'maybank2u'
            | 'ocbc'
            | 'pb_enterprise'
            | 'public_bank'
            | 'rhb'
            | 'standard_chartered'
            | 'uob'
          /** @description Unique transaction id generated by FPX for every request from the merchant */
          transaction_id?: string
        }
        /** payment_method_details_giropay */
        giropay?: {
          /** @description Bank code of bank associated with the bank account. */
          bank_code?: string
          /** @description Name of the bank associated with the bank account. */
          bank_name?: string
          /** @description Bank Identifier Code of the bank associated with the bank account. */
          bic?: string
          /**
           * @description Owner's verified full name. Values are verified or provided by Giropay directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_ideal */
        ideal?: {
          /**
           * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
           * @enum {string}
           */
          bank?:
            | 'abn_amro'
            | 'asn_bank'
            | 'bunq'
            | 'handelsbanken'
            | 'ing'
            | 'knab'
            | 'moneyou'
            | 'rabobank'
            | 'regiobank'
            | 'sns_bank'
            | 'triodos_bank'
            | 'van_lanschot'
          /**
           * @description The Bank Identifier Code of the customer's bank.
           * @enum {string}
           */
          bic?:
            | 'ABNANL2A'
            | 'ASNBNL21'
            | 'BUNQNL2A'
            | 'FVLBNL22'
            | 'HANDNL2A'
            | 'INGBNL2A'
            | 'KNABNL2H'
            | 'MOYONL21'
            | 'RABONL2U'
            | 'RBRBNL21'
            | 'SNSBNL2A'
            | 'TRIONL2U'
          /** @description Last four characters of the IBAN. */
          iban_last4?: string
          /**
           * @description Owner's verified full name. Values are verified or provided by iDEAL directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_klarna */
        klarna?: Record<string, never>
        /** payment_method_details_multibanco */
        multibanco?: {
          /** @description Entity number associated with this Multibanco payment. */
          entity?: string
          /** @description Reference number associated with this Multibanco payment. */
          reference?: string
        }
        /** payment_method_details_p24 */
        p24?: {
          /** @description Unique reference for this Przelewy24 payment. */
          reference?: string
          /**
           * @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_sepa_debit */
        sepa_debit?: {
          /** @description Bank code of bank associated with the bank account. */
          bank_code?: string
          /** @description Branch code of bank associated with the bank account. */
          branch_code?: string
          /** @description Two-letter ISO code representing the country the bank account is located in. */
          country?: string
          /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
          fingerprint?: string
          /** @description Last four characters of the IBAN. */
          last4?: string
          /** @description ID of the mandate used to make this payment. */
          mandate?: string
        }
        /** payment_method_details_sofort */
        sofort?: {
          /** @description Bank code of bank associated with the bank account. */
          bank_code?: string
          /** @description Name of the bank associated with the bank account. */
          bank_name?: string
          /** @description Bank Identifier Code of the bank associated with the bank account. */
          bic?: string
          /** @description Two-letter ISO code representing the country the bank account is located in. */
          country?: string
          /** @description Last four characters of the IBAN. */
          iban_last4?: string
          /**
           * @description Owner's verified full name. Values are verified or provided by SOFORT directly
           * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
           */
          verified_name?: string
        }
        /** payment_method_details_stripe_account */
        stripe_account?: Record<string, never>
        /**
         * @description The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
         * An additional hash is included on `payment_method_details` with a name matching this value.
         * It contains information specific to the payment method.
         */
        type: string
        /** payment_method_details_wechat */
        wechat?: Record<string, never>
      }
      /** @description This is the email address that the receipt for this charge was sent to. */
      receipt_email?: string
      /** @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
      receipt_number?: string
      /** @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
      receipt_url?: string
      /** @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
      refunded: boolean
      /**
       * RefundList
       * @description A list of refunds that have been applied to the charge.
       */
      refunds: {
        /** @description Details about each object. */
        data: {
          /** @description Amount, in %s. */
          amount: number
          /** @description Balance transaction that describes the impact on your account balance. */
          balance_transaction?: string
          /** @description ID of the charge that was refunded. */
          charge?: string
          /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
          created: number
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
          description?: string
          /** @description If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
          failure_balance_transaction?: string
          /** @description If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
          failure_reason?: string
          /** @description Unique identifier for the object. */
          id: string
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
          metadata: Record<string, never>
          /**
           * @description String representing the object's type. Objects of the same type share the same value.
           * @enum {string}
           */
          object: 'refund'
          /** @description ID of the PaymentIntent that was refunded. */
          payment_intent?: string
          /** @description Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
          reason?: string
          /** @description This is the transaction number that appears on email receipts sent for this refund. */
          receipt_number?: string
          /** @description The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
          source_transfer_reversal?: string
          /** @description Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
          status?: string
          /** @description If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
          transfer_reversal?: string
        }[]
        /** @description True if this list has another page of items after this one that can be fetched. */
        has_more: boolean
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        object: 'list'
        /** @description The URL where this list can be accessed. */
        url: string
      }
      /** @description ID of the review associated with this charge if one exists. */
      review?: string
      /** Shipping */
      shipping?: {
        /** Address */
        address?: {
          /** @description City, district, suburb, town, or village. */
          city?: string
          /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
          country?: string
          /** @description Address line 1 (e.g., street, PO Box, or company name). */
          line1?: string
          /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
          line2?: string
          /** @description ZIP or postal code. */
          postal_code?: string
          /** @description State, county, province, or region. */
          state?: string
        }
        /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
        carrier?: string
        /** @description Recipient name. */
        name?: string
        /** @description Recipient phone (including extension). */
        phone?: string
        /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
        tracking_number?: string
      }
      /** @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      source_transfer?: string
      /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ statements. Must contain at least one letter, maximum 22 characters. */
      statement_descriptor?: string
      /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâs set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
      statement_descriptor_suffix?: string
      /** @description The status of the payment is either `succeeded`, `pending`, or `failed`. */
      status: string
      /** @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
      transfer?: string
      /** ChargeTransferData */
      transfer_data?: {
        /** @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
        amount?: number
        /** @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
        destination: string
      }
      /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
      transfer_group?: string
    }
    /**
     * NotificationEvent
     * @description Events are our way of letting you know when something interesting happens in
     * your account. When an interesting event occurs, we create a new `Event`
     * object. For example, when a charge succeeds, we create a `charge.succeeded`
     * event; and when an invoice payment attempt fails, we create an
     * `invoice.payment_failed` event. Note that many API requests may cause multiple
     * events to be created. For example, if you create a new subscription for a
     * customer, you will receive both a `customer.subscription.created` event and a
     * `charge.succeeded` event.
     *
     * Events occur when the state of another API resource changes. The state of that
     * resource at the time of the change is embedded in the event's data field. For
     * example, a `charge.succeeded` event will contain a charge, and an
     * `invoice.payment_failed` event will contain an invoice.
     *
     * As with other API resources, you can use endpoints to retrieve an
     * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
     * from the API. We also have a separate
     * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
     * `Event` objects directly to an endpoint on your server. Webhooks are managed
     * in your
     * [account settings](https://dashboard.stripe.com/account/webhooks'),
     * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
     *
     * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
     * events that occur in connected accounts. For these events, there will be an
     * additional `account` attribute in the received `Event` object.
     *
     * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
     * guaranteed only for 30 days.
     */
    external__stripe__event: {
      /** @description The connected account that originated the event. */
      account?: string
      /** @description The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
      api_version?: string
      /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number
      /** NotificationEventData */
      data: {
        /** @description Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
        object: Record<string, never>
        /** @description Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
        previous_attributes?: Record<string, never>
      }
      /** @description Unique identifier for the object. */
      id: string
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: 'event'
      /** @description Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
      pending_webhooks: number
      /** NotificationEventRequest */
      request?: {
        /** @description ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
        id?: string
        /** @description The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
        idempotency_key?: string
      }
      /** @description Description of the event (e.g., `invoice.created` or `charge.refunded`). */
      type: string
    }
    webhook__handle_square_refund_args: {
      /** Format: string */
      merchant_id?: string
      /** Format: string */
      type?: string
      /** Format: string */
      event_id?: string
      /** Format: string */
      created_at?: string
      data?: {
        /** Format: string */
        type?: string
        /** Format: string */
        id?: string
        object?: {
          refund?: {
            amount_money?: {
              /** Format: int64 */
              amount?: number
              /** Format: string */
              currency?: string
            }
            /** Format: string */
            created_at?: string
            /** Format: string */
            destination_type?: string
            /** Format: string */
            id?: string
            /** Format: string */
            location_id?: string
            /** Format: string */
            order_id?: string
            /** Format: string */
            payment_id?: string
            /** Format: string */
            reason?: string
            /** Format: string */
            status?: string
            /** Format: string */
            updated_at?: string
            /** Format: int64 */
            version?: number
            processing_fee?:
              | {
                  amount_money?: {
                    /** Format: int64 */
                    amount?: number
                    /** Format: string */
                    currency?: string
                  }
                  /** Format: string */
                  effective_at?: string
                  /** Format: string */
                  type?: string
                }[]
              | null
          }
        }
      }
    }
    webhook__webhook_test_response: {
      test_status: boolean
    }
    'webhook__virtual-card-authorization-transaction__funding': {
      /** Format: integer */
      amount?: number
      /** Format: string */
      type?: string
      /** Format: string */
      token?: string
    }
    'webhook__virtual-card-authorization-transaction__asa_transaction_response': {
      /** Format: string */
      result?: string
      /** Format: string */
      token?: string
    }
    'webhook__virtual-card-authorization-transaction__merchant': {
      /** Format: string */
      acceptor_id?: string
      /** Format: string */
      city?: string
      /** Format: string */
      country?: string
      /** Format: string */
      descriptor?: string
      /** Format: string */
      mcc?: string
      /** Format: string */
      state?: string
    }
    'webhook__virtual-card-authorization-transaction__pos': {
      terminal?: {
        attended?: boolean
        /** Format: string */
        operator?: string
        on_premise?: boolean
        card_retention_capable?: boolean
        /** Format: string */
        pin_capability?: string
        /** Format: string */
        type?: string
        partial_approval_capable?: boolean
      }
      entry_mode?: {
        /** Format: string */
        pan?: string
        pin_entered?: boolean
        /** Format: string */
        cardholder?: string
        /** Format: string */
        card?: string
      }
    }
    'webhook__virtual-card-authorization-transaction__asa_transaction': {
      /** Format: integer */
      amount?: number
      /** Format: integer */
      acquirer_fee?: number
      /** Format: integer */
      authorization_amount?: number
      avs?: {
        /** Format: string */
        address?: string
        /** Format: string */
        zipcode?: string
      }
      card?: components['schemas']['webhook__virtual-card-authorization-transaction__card']
      cardholder_authentication?: components['schemas']['webhook__virtual-card-authorization-transaction__cardholder_authentication']
      /** Format: integer */
      cash_amount?: number
      /** Format: float */
      conversion_rate?: number
      /** Format: date-time */
      created?: string
      events?: components['schemas']['webhook__virtual-card-authorization-transaction__event'][]
      funding?: components['schemas']['webhook__virtual-card-authorization-transaction__funding'][]
      /** Format: integer */
      merchant_amount?: number
      /** Format: string */
      merchant_currency?: string
      merchant?: components['schemas']['webhook__virtual-card-authorization-transaction__merchant']
      /** Format: string */
      network?: string
      pos?: components['schemas']['webhook__virtual-card-authorization-transaction__pos']
      /** Format: integer */
      settled_amount?: number
      /** Format: string */
      status?: string
      /** Format: string */
      token?: string
      token_info?: {
        /** Format: string */
        wallet_type?: string
      }
    }
    'webhook__virtual-card-authorization-transaction__cardholder_authentication': {
      /** Format: string */
      verification_attempted?: string
      /** Format: string */
      verification_result?: string
      /** Format: string */
      liability_shift?: string
      /** Format: string */
      '3ds_version'?: string
      /** Format: string */
      acquirer_exemption?: string
      /** Format: string */
      authentication_result?: string
      /** Format: string */
      decision_made_by?: string
      /** Format: string */
      three_ds_authentication_token?: string
    }
    'webhook__virtual-card-authorization-transaction__card': {
      /** Format: string */
      created?: string
      /** Format: string */
      cvv?: string
      funding?: {
        /** Format: string */
        created?: string
        /** Format: string */
        token?: string
        /** Format: string */
        type?: string
        /** Format: string */
        state?: string
        /** Format: string */
        nickname?: string
        /** Format: string */
        account_name?: string
        /** Format: string */
        last_four?: string
      }
      /** Format: string */
      exp_month?: string
      /** Format: string */
      exp_year?: string
      /** Format: string */
      hostname?: string
      /** Format: string */
      last_four?: string
      /** Format: string */
      memo?: string
      /** Format: string */
      pan?: string
      /** Format: integer */
      spend_limit?: number
      /** Format: string */
      spend_limit_duration?: string
      /** Format: string */
      state?: string
      /** Format: string */
      token?: string
      /** Format: string */
      type?: string
      auth_rule_tokens?: string[]
      /** Format: string */
      digital_card_art_token?: string
    }
    'webhook__virtual-card-authorization-transaction__event': {
      /** Format: integer */
      amount?: number
      /** Format: string */
      created?: string
      /** Format: string */
      result?: string
      /** Format: string */
      type?: string
      /** Format: string */
      token?: string
    }
    list_transactions_response: {
      transactions: components['schemas']['ledger_transaction'][]
      /** Format: string */
      nextCursor: string
      hasMore: boolean
    }
    virtual_card: {
      /** Format: string */
      id: string
      /** Format: string */
      type: string
      /** Format: date-time */
      createdAt: string
      metadata: {
        [key: string]: Record<string, never>
      }
      card?: {
        /** Format: string */
        lastFour: string
        /** Format: string */
        expMonth: string
        /** Format: string */
        expYear: string
        /** Format: string */
        cardHolderName: string
        /** Format: string */
        cardNetwork: string
        /** Format: string */
        state: string
      }
    }
    initialize_payment_session_args: {
      /** Format: string */
      customerId: string
    }
    ledger_transaction: {
      /** Format: string */
      transactionId: string | null
      /** Format: string */
      customerId?: string | null
      /** Format: string */
      transactionType: string | null
      /** Format: string */
      transactionSource?: string | null
      /** Format: string */
      paymentMethodId?: string | null
      /** Format: string */
      reason?: string | null
      /** Format: int64 */
      amount: number | null
      /** Format: string */
      from?: string | null
      /** Format: string */
      to?: string | null
      /** Format: string */
      label?: string | null
      metadata?: Record<string, unknown> | null
      /** Format: date-time */
      created: string | null
    }
    virtual_card_transaction: {
      /** Format: string */
      id: string
      /** Format: string */
      acceptorId: string
      /**
       * Format: string
       * @enum {string}
       */
      status: 'OPEN' | 'PAUSED' | 'CLOSED'
      /** Format: string */
      decision: string
      /** Format: int64 */
      authorizationAmount: number
      /** Format: date-time */
      created: string
    }
    version_info: {
      /** Format: string */
      gitCommitHash: string
    }
    merchant: {
      /** Format: string */
      id: string
      /** Format: string */
      name: string
      metadata: {
        /** Format: string */
        paymentProcessor: string
        /** Format: string */
        omsProvider: string
        square: {
          isTestMode: boolean
          appClientId: string
          defaultLocationId: string
          accessToken?: string
        }
        stripe: {
          isTestMode: boolean
          connectedAccountId?: string
        }
        promotions: {
          /** Format: string */
          type: string
          rewardTiers: {
            /** Format: int64 */
            minTransactionRequirement: number
            /** Format: int64 */
            promotionAmount: number
          }[]
        }
        auto_reload_config: {
          /** Format: int64 */
          minimum_auto_reload_threshold: number
          /** Format: int64 */
          minimum_auto_reload_amount: number
          /** Format: int64 */
          maximum_auto_reload_amount: number
        }
      }
    }
    error: {
      /** Format: int64 */
      code?: number
      message: string
      fields?: string
    }
    admin__settle_merchant_balance_response: {
      /** Format: int64 */
      settlementAmount: number
      /** Format: date-time */
      timestamp: string
      /** Format: string */
      transactionId: string
      /** Format: string */
      achTransferId: string
    }
    list_virtual_card_transactions_response: {
      transactions: components['schemas']['virtual_card_transaction'][]
      /** Format: string */
      nextCursor: string
      hasMore: boolean
    }
    ansa_error: {
      /** Format: string */
      type: string
      /** Format: string */
      code: string
      /** Format: string */
      message: string
      /** Format: string */
      declineCode?: string
      deficit?: {
        /** Format: int64 */
        amount: number
        /** Format: string */
        currency: string
      }
    }
    health_response: {
      versionInfo: components['schemas']['version_info']
    }
    count_response: {
      totalCount: number
    }
    list_transactions_response_no_pagination: {
      transactions: components['schemas']['ledger_transaction'][]
    }
    'internal-admin__customers_list_response': {
      results: components['schemas']['internal-admin__customer'][]
      hasMore: boolean
      cursor: string
    }
    'internal-admin__create_merchant_args': {
      /** Format: string */
      name: string
      /** Format: string */
      gatewayToken?: string
      /** Format: string */
      stripeSecretKey?: string
      /** Format: string */
      stripeConnectedAccountId?: string
      /** Format: string */
      squareAccessToken?: string
      /** Format: string */
      squareRefreshToken?: string
      /** Format: string */
      squareAppClientId?: string
      /** Format: string */
      squareAppClientSecret?: string
      /** Format: string */
      defaultPaymentProcessor?: string
      /** Format: string */
      orderManagementProvider?: string
      /** Format: string */
      sardineClientId?: string
      promoConfig?: {
        /** Format: string */
        promoType: string
        rewardTiers: {
          /** Format: int64 */
          minTransactionRequirement: number
          /** Format: int64 */
          promoAmount: number
        }[]
      }
    }
    'internal-admin__fund_balance_args': {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: string */
      customerId: string
      /** Format: string */
      reason?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    'internal-admin__payment_methods_list': {
      paymentMethods: components['schemas']['internal-admin__payment_method'][]
      /** Format: int64 */
      count: number
    }
    'internal-admin__customer': {
      /** Format: string */
      id: string
      /** Format: string */
      billingFirst?: string
      /** Format: string */
      billingLast?: string
      /** Format: string */
      email?: string
      /** Format: string */
      phoneNumber?: string
      /** Format: string */
      status?: string | null
      balance?: components['schemas']['internal-admin__balance']
      paymentMethods?: components['schemas']['internal-admin__payment_methods_list']
      autoReloadConfig?: {
        enabled: boolean
        /** Format: int64 */
        reloadAmount: number
        /** Format: int64 */
        triggerThresholdAmount: number
        /** Format: string */
        paymentMethodId: string
      }
      metadata?: Record<string, unknown> | null
      ansaMetadata?: {
        square?: {
          /** Format: string */
          customerId: string
        }
        stripe?: {
          /** Format: string */
          customerId: string
        }
      }
    }
    'internal-admin__merchant_acceptor_id': {
      /** Format: string */
      id: string
      /** Format: string */
      label?: string
    }
    'internal-admin__balance': {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
    }
    'internal-admin__upsert_merchant_acceptor_ids_args': {
      acceptorIds: components['schemas']['internal-admin__merchant_acceptor_id'][]
    }
    'internal-admin__activate_virtual_card_program_args': {
      /** Format: string */
      digitalCardArtToken?: string
    }
    'internal-admin__manual_operation_response': {
      /** Format: date-time */
      timestamp: string
      /** Format: string */
      transactionId: string
    }
    'internal-admin__fund_balance_response': {
      /** Format: string */
      customerId: string
      /** Format: date-time */
      timestamp: string
      currentBalance: components['schemas']['customer__balance']
      /** Format: string */
      transactionId: string
    }
    'internal-admin__merchant_api_key': {
      /** Format: string */
      merchantId: string
      /** Format: string */
      merchantSecretKey: string
    }
    'internal-admin__payment_method_card': {
      /** Format: string */
      lastFour?: string
      /** Format: string */
      firstSix?: string
      /** Format: string */
      brand?: string
      /** Format: string */
      fingerprint?: string
    }
    'internal-admin__merchants_list_response': {
      results: components['schemas']['merchant'][]
      /** Format: int64 */
      nextCursor: number
      /** Format: int64 */
      count: number
    }
    'internal-admin__payment_method': {
      /** Format: string */
      id?: string
      /** Format: string */
      type?: string
      card?: components['schemas']['internal-admin__payment_method_card']
      preferred?: boolean
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    'internal-admin__merchant_acceptor_ids_list_response': {
      acceptorIds: components['schemas']['internal-admin__merchant_acceptor_id'][]
    }
    initialize_payment_session_response: {
      /** Format: string */
      id: string
      /** Format: string */
      clientSecret: string
      /** Format: string */
      customerId: string
      /** Format: date-time */
      created: string
      /** Format: date-time */
      validUntil: string
    }
    customer__create_customer_clone_response: {
      /** Format: string */
      customerId: string
      paymentMethodIds?: string[]
    }
    customer__create_payment_method_clone_response: {
      /** Format: string */
      paymentMethodId: string
    }
    customer__create_customer_clone_args: {
      /** Format: string */
      email?: string | null
      /** Format: string */
      phone?: string | null
      /** Format: string */
      customerIdToClone: string | null
      billingDetails?: components['schemas']['customer__billing_details']
    }
    customer__auto_reload_config_response: {
      enabled: boolean
      /** Format: int64 */
      reloadAmount?: number | null
      /** Format: int64 */
      reloadThreshold?: number | null
      /** Format: string */
      paymentMethodId?: string | null
    }
    customer__update_customer_args: {
      /** Format: string */
      email?: string | null
      /** Format: string */
      phone?: string | null
      /** Format: string */
      firstName?: string | null
      /** Format: string */
      lastName?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__payment_methods_list: {
      paymentMethods: components['schemas']['customer__payment_method'][]
      /** Format: int64 */
      count: number
    }
    customer__billing_details: {
      /** Format: string */
      firstName: string | null
      /** Format: string */
      lastName: string | null
      address?: components['schemas']['customer__address']
    }
    customer__add_balance_args: {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /**
       * Format: boolean
       * @description Passing this flag in the body of the add balance request disables any promotional config for this request. i.e. the described balance will be added and no additional funds.
       */
      disablePromotion?: boolean
      /** Format: string */
      paymentMethodId: string
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__customer: {
      /** Format: string */
      id?: string | null
      /** Format: date-time */
      createdAt?: string | null
      /** Format: string */
      merchantId?: string | null
      /** Format: string */
      status?: string | null
      balance?: components['schemas']['customer__balance']
      billingDetails?: components['schemas']['customer__billing_details']
      /** Format: string */
      email?: string | null
      /** Format: string */
      phone?: string | null
      metadata?: Record<string, unknown> | null
      ansaMetadata?: {
        square?: {
          /** Format: string */
          customerId: string
        }
        stripe?: {
          /** Format: string */
          customerId: string
        }
      }
    }
    customer__balance: {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
    }
    customer__create_payment_method_clone_args: {
      /** Format: string */
      paymentMethodIdToClone: string | null
    }
    customer__add_balance_response: {
      /** Format: date-time */
      timestamp: string
      currentBalance: components['schemas']['customer__balance']
      /** Format: string */
      transactionId: string
    }
    customer__order_info__order_info: {
      /** Format: string */
      type: string
      square?: components['schemas']['customer__order_info__square_order_info']
    }
    customer__order_info__square_fulfillment: {
      pickupDetails: {
        /** Format: date-time */
        pickupAt: string
        /** Format: string */
        pickupWindowDuration?: string | null
        /** Format: string */
        scheduleType?: string | null
        /** Format: string */
        note?: string | null
      }
    }
    customer__order_info__order_info_response: {
      /** Format: string */
      type: string
      square?: components['schemas']['customer__order_info__square_order_info_response']
    }
    customer__order_info__square_order_info_response: {
      /** Format: string */
      orderId: string | null
      /** Format: string */
      paymentId?: string | null
      /** Format: string */
      locationId?: string | null
    }
    customer__order_info__square_line_item: {
      /** Format: int64 */
      quantity: number
      /** Format: string */
      catalogObjectId: string
      /** Format: string */
      note?: string | null
      modifiers?:
        | {
            /** Format: int64 */
            basePriceMoney?: number | null
            /** Format: string */
            catalogObjectId?: string | null
            /** Format: string */
            name?: string | null
            /** Format: int64 */
            quantity?: number | null
          }[]
        | null
    }
    customer__order_info__square_order_info: {
      /** Format: string */
      locationId?: string | null
      lineItems?: components['schemas']['customer__order_info__square_line_item'][]
      fulfillment?: components['schemas']['customer__order_info__square_fulfillment']
      /** Format: int64 */
      tipAmount?: number | null
      /** Format: string */
      orderId?: string | null
      reward?: {
        /** Format: string */
        loyaltyAccountId: string | null
        /** Format: string */
        rewardTierId: string | null
      } | null
      rewards?: ({
        /** Format: string */
        loyaltyAccountId: string | null
        /** Format: string */
        rewardTierId: string | null
      } | null)[]
    }
    customer__address: {
      /** Format: string */
      city: string | null
      /** Format: string */
      country: string | null
      /** Format: string */
      line1: string | null
      /** Format: string */
      line2?: string | null
      /** Format: string */
      postalCode: string | null
      /** Format: string */
      state: string | null
    }
    customer__customer_list_response: {
      hasMore: boolean
      /** Format: string */
      cursor: string
      customers: components['schemas']['customer__customer'][]
    }
    customer__virtual_card_provision_response: {
      /** Format: string */
      provisioningPayload: string
      /** Format: string */
      ephemeralPublicKey: string
      /** Format: string */
      encryptedData: string
    }
    customer__virtual_card_provision_args: {
      /** Format: string */
      digitalWallet: string
      /** Format: string */
      nonce?: string
      /** Format: string */
      nonceSignature?: string
      /** Format: string */
      certificate?: string
    }
    customer__create_customer_args: {
      /** Format: string */
      email?: string | null
      /** Format: string */
      phone?: string | null
      billingDetails: components['schemas']['customer__billing_details']
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__create_payment_method_args: {
      /** Format: string */
      token: string | null
      /** Format: string */
      tokenSource: string | null
      /** Format: string */
      postalCode?: string
      tokenData?: Record<string, never>
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__use_balance_args: {
      /** Format: int64 */
      amount: number
      reloadInfo?: components['schemas']['customer__reload_info']
      orderInfo?: components['schemas']['customer__order_info__order_info']
      /** Format: string */
      label?: string
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__update_payment_method_args: {
      preferred?: boolean | null
    }
    customer__payment_method_card: {
      /** Format: string */
      lastFour?: string
      /** Format: string */
      firstSix?: string
      /** Format: string */
      brand?: string
      /** Format: string */
      fingerprint?: string
    }
    customer__update_virtual_card_args: {
      /** @enum {string} */
      status: 'OPEN' | 'PAUSED' | 'CLOSED'
    }
    customer__reload_info: {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: string */
      paymentMethodId: string
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__payment_method: {
      /** Format: string */
      id?: string
      /** Format: string */
      type?: string
      card?: components['schemas']['customer__payment_method_card']
      preferred?: boolean
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    customer__use_balance_response: {
      currentBalance: components['schemas']['customer__balance']
      /** Format: string */
      transactionId: string
      /** Format: date-time */
      timestamp: string
      /** Format: string */
      label: string
      orderInfo?: components['schemas']['customer__order_info__order_info_response']
    }
    customer__auto_reload_config_args: {
      enabled: boolean
      /** Format: int64 */
      reloadAmount?: number | null
      /** Format: int64 */
      reloadThreshold?: number | null
      /** Format: string */
      paymentMethodId?: string | null
    }
    merchant__update_transaction_metadata_args: {
      /** Format: string */
      label?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    merchant__expiry_args: {
      /** Format: string */
      transactionId: string
      /** Format: int64 */
      amount?: number | null
      /** Format: string */
      reason?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    merchant__refund_response: {
      /** Format: string */
      id: string
      /** Format: string */
      transactionId: string
      /** Format: string */
      customerId: string
      /** @enum {string} */
      type: 'balance' | 'payment_method'
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: string */
      reason: string
      paymentMethod?: {
        /** Format: string */
        id: string
      }
      /** @enum {string} */
      status: 'pending' | 'succeeded' | 'failed'
      metadata: Record<string, never>
      /** Format: date-time */
      created: string
    }
    merchant__fund_balance_args: {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: string */
      customerId: string
      /** Format: string */
      reason?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    merchant__insights: {
      totalCustomerAddedBalance: components['schemas']['customer__balance']
      totalCustomerBalance: components['schemas']['customer__balance']
      totalMerchantFundedBalance: components['schemas']['customer__balance']
      totalSettledBalance: components['schemas']['customer__balance']
      /** Format: int64 */
      totalUsers: number
    }
    merchant__refund_args: {
      /** Format: string */
      transactionId: string
      /** Format: int64 */
      amount?: number | null
      /** Format: string */
      reason?: string | null
      metadata?: {
        [key: string]: Record<string, never>
      }
    }
    merchant__balance: {
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: int64 */
      promotionalAmount: number
    }
    merchant__update_transaction_label_args: {
      /** Format: string */
      label: string
    }
    merchant__update_merchant_args: {
      promoConfig?: {
        /** Format: string */
        promoType: string
        rewardTiers: {
          /** Format: int64 */
          minTransactionRequirement: number
          /** Format: int64 */
          promoAmount: number
        }[]
      }
    }
    merchant__expiry_response: {
      /** Format: string */
      expiryTransactionId: string
      /** Format: string */
      promoTransactionId: string
      /** Format: string */
      customerId: string
      /** Format: int64 */
      amount: number
      /** Format: string */
      currency: string
      /** Format: string */
      reason: string
      metadata: Record<string, never>
      /** Format: date-time */
      created: string
    }
    merchant__fund_balance_response: {
      /** Format: string */
      customerId: string
      /** Format: date-time */
      timestamp: string
      currentBalance: components['schemas']['customer__balance']
      /** Format: string */
      transactionId: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** list all customers */
  listCustomers: {
    parameters: {
      query?: {
        cursor?: string
        limit?: number
        direction?: 'forward' | 'backward'
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer_list_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create a customer balance at a merchant */
  createCustomer: {
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__create_customer_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** count all customers at a merchant */
  countCustomers: {
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['count_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Retrieve an existing Customer object by email, id, or phone number */
  searchCustomer: {
    parameters: {
      query?: {
        email?: string
        customerId?: string
        phoneNumber?: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description not found */
      404: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create a customer balance at a merchant by cloning the customer from an existing source */
  createCustomerClone: {
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__create_customer_clone_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__create_customer_clone_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Retrieve an existing Customer object by its identifier. */
  getCustomer: {
    parameters: {
      query?: {
        details?: boolean
      }
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Update an existing customer */
  updateCustomer: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__update_customer_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Deactivate an existing Customer object by its identifier. */
  deactivateCustomer: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** List all payment methods */
  listPaymentMethods: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__payment_methods_list']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Creates a PaymentMethod object. */
  createPaymentMethod: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__create_payment_method_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__payment_method']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Updates a PaymentMethod object. */
  updatePaymentMethod: {
    parameters: {
      path: {
        customerId: string
        paymentMethodId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__update_payment_method_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__payment_method']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Delete a payment method. */
  deletePaymentMethod: {
    parameters: {
      path: {
        customerId: string
        paymentMethodId: string
      }
    }
    responses: {
      /** @description The resource was deleted successfully. */
      200: {
        content: {}
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description not found */
      404: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create a payment method by cloning it from an existing source */
  createPaymentMethodClone: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__create_payment_method_clone_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__create_payment_method_clone_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Retrieve the auto reload configuration for a customer. */
  getAutoReloadConfig: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__auto_reload_config_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Update the auto reload configuration for a customer. */
  setAutoReloadConfig: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__auto_reload_config_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__auto_reload_config_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** add funds to a customer balance */
  addBalance: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['customer__add_balance_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__add_balance_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** use the customer balance funds to complete a purchase */
  useBalance: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['customer__use_balance_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__use_balance_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** retrieve all transactions involving this customer */
  listCustomerTransactions: {
    parameters: {
      query?: {
        transactionType?: string
        label?: string
        cursor?: string
        limit?: number
        createdAtOrBefore?: string
        createdAtOrAfter?: string
        direction?: 'forward' | 'backward'
      }
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['list_transactions_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get virtual card for a given customer */
  getVirtualCard: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['virtual_card']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** update the virtual card for a given consumer */
  updateVirtualCard: {
    parameters: {
      path: {
        customerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['customer__update_virtual_card_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['virtual_card']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create a virtual card for a given customer */
  createVirtualCard: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['virtual_card']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** retrieve all transactions for this virtual card */
  listVirtualCardTransactions: {
    parameters: {
      query?: {
        cursor?: string
        limit?: number
        direction?: 'forward' | 'backward'
      }
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['list_virtual_card_transactions_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** count all virtual card transactions */
  countVirtualCardTxns: {
    parameters: {
      path: {
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['count_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** provision a given virtual card */
  provisionVirtualCard: {
    parameters: {
      path: {
        customerId: string
        virtualCardId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['customer__virtual_card_provision_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['customer__virtual_card_provision_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** initiate a refund to a customer's balance */
  merchantRefundBalance: {
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__refund_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__refund_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** initiate a refund to a customer's payment method */
  merchantRefundPaymentMethod: {
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__refund_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__refund_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description request failed */
      402: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get details about refund */
  merchantGetRefund: {
    parameters: {
      path: {
        refundId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__refund_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description not found */
      404: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** merchant add funds to a customers balance */
  merchantFundBalance: {
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__fund_balance_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__fund_balance_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** initiate a PaymentSession object for client authorization */
  initializePaymentSession: {
    requestBody: {
      content: {
        'application/json': components['schemas']['initialize_payment_session_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['initialize_payment_session_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get details about a merchant */
  merchantGet: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** update details for a merchant */
  updateMerchant: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__update_merchant_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get the merchant's current balance */
  getMerchantBalance: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__balance']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** fetch merchant insights */
  merchantInsights: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['merchant__insights']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** retrieve all transactions with a given merchant */
  listMerchantTransactions: {
    parameters: {
      query?: {
        customerId?: string
        transactionType?: string
        label?: string
        cursor?: string
        limit?: number
        createdAtOrBefore?: string
        createdAtOrAfter?: string
        direction?: 'forward' | 'backward'
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['list_transactions_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** count number of transactions */
  countTransactions: {
    parameters: {
      query?: {
        customerId?: string
        transactionType?: string
        label?: string
        createdAtOrBefore?: string
        createdAtOrAfter?: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['count_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get a merchant transaction */
  getMerchantTransaction: {
    parameters: {
      path: {
        transactionId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['ledger_transaction']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** update a specified transaction's label */
  updateMerchantTransactionLabel: {
    parameters: {
      path: {
        transactionId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__update_transaction_label_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['ledger_transaction']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** update a specified transaction's metadata and label */
  updateTransactionMetadata: {
    parameters: {
      path: {
        transactionId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['merchant__update_transaction_metadata_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['ledger_transaction']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get refunds for a transaction */
  getMerchantTransactionRefunds: {
    parameters: {
      path: {
        transactionId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['list_transactions_response_no_pagination']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** refresh Ansa merchant's auth credentials */
  adminAuthRefresh: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {}
      }
      /** @description bad request */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** trigger settlement for a merchant's pending payout balance */
  settleMerchantBalance: {
    requestBody: {
      content: {
        'application/json': {
          /** Format: string */
          merchantId: string
          /** Format: int64 */
          overrideSettlementAmount?: number | null
        }
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['admin__settle_merchant_balance_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  /** list all Ansa merchants and their information */
  internalAdminListMerchants: {
    parameters: {
      query: {
        start: number
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__merchants_list_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create an Ansa merchant account */
  internalAdminCreateMerchant: {
    requestBody: {
      content: {
        'application/json': components['schemas']['internal-admin__create_merchant_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__merchant_api_key']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** create an Ansa merchant api key */
  internalAdminCreateMerchantApiKey: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__merchant_api_key']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** list all customers under an Ansa merchant */
  internalAdminListCustomers: {
    parameters: {
      query?: {
        cursor?: string
        direction?: 'forward' | 'backward'
        limit?: number
      }
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__customers_list_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get the merchant balance */
  internalAdminGetMerchantBalance: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__balance']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** internal admin endpoint to add funds to a customers balance */
  internalAdminMerchantFundBalance: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['internal-admin__fund_balance_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__fund_balance_response']
        }
      }
      /** @description invalid parameters */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description conflict */
      409: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get total customer balance for a merchant */
  internalAdminGetMerchantTotalCustomerBalance: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__balance']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** get a customer under an Ansa merchant */
  internalAdminGetCustomer: {
    parameters: {
      path: {
        merchantId: string
        customerId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__customer']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** Activate virtual card program for a merchant */
  internalAdminActivateVirtualCardProgram: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['internal-admin__activate_virtual_card_program_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {}
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** list all acceptor ids for a given merchant */
  internalAdminListMerchantAcceptorIds: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__merchant_acceptor_ids_list_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** upsert a list of acceptor ids for a given merchant */
  internalAdminUpsertMerchantAcceptorIds: {
    parameters: {
      path: {
        merchantId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['internal-admin__upsert_merchant_acceptor_ids_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['internal-admin__merchant_acceptor_ids_list_response']
        }
      }
      /** @description unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** called by PSPs to register auth tokens to the new merchant */
  webhookSquareAuthCallBack: {
    parameters: {
      query?: {
        code?: string | null
        state?: string | null
        response_type?: string | null
        error_code?: string | null
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {}
      }
      /** @description bad request */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** called by Square to process refunds */
  webhookHandleSquareRefund: {
    requestBody: {
      content: {
        'application/json': components['schemas']['webhook__handle_square_refund_args']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {}
      }
      /** @description accepted */
      202: {
        content: {}
      }
      /** @description bad request */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** called by Stripe to process refunds */
  webhookHandleStripeRefund: {
    requestBody: {
      content: {
        'application/json': components['schemas']['external__stripe__event']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {}
      }
      /** @description accepted */
      202: {
        content: {}
      }
      /** @description bad request */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** called by Lithic to process virtual card transaction authorizations */
  webhookHandleVirtualCardsAuthorization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['webhook__virtual-card-authorization-transaction__asa_transaction']
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['webhook__virtual-card-authorization-transaction__asa_transaction_response']
        }
      }
      /** @description bad request */
      400: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      500: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
  /** used for webhook testing (Svix) */
  webhookTest: {
    parameters: {
      header: {
        'webhook-id': string
        'webhook-timestamp': string
        'webhook-signature': string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['webhook__webhook_test_response']
        }
      }
      /** @description error */
      default: {
        content: {
          'application/json': components['schemas']['ansa_error']
        }
      }
    }
  }
}
